import flet as ft
import time
import json
from datetime import datetime

class NativeNotification:
    def __init__(self, page):
        self.page = page
    
    def show_notification(self, title, message):
        """–í—ã–∑–æ–≤ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Platform Channel"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω
            self.page.invoke_method("createNotificationChannel")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.page.invoke_method(
                "showNotification",
                {
                    "title": title,
                    "message": message
                }
            )
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            self.show_fallback_notification(title, message)
            return False
    
    def show_fallback_notification(self, title, message):
        """–ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –µ—Å–ª–∏ –Ω–∞—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç"""
        self.page.dialog = ft.AlertDialog(
            title=ft.Text(title),
            content=ft.Text(message),
            actions=[ft.TextButton("OK", on_click=lambda e: self.close_dialog())]
        )
        self.page.dialog.open = True
        self.page.update()
    
    def close_dialog(self):
        self.page.dialog.open = False
        self.page.update()

class VoiceRecorder:
    """–ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ Flet Audio"""
    
    def __init__(self, page):
        self.page = page
        self.is_recording = False
        self.audio_recorder = ft.AudioRecorder(
            on_state_changed=self.on_recording_state_change,
            on_result=self.on_recording_result
        )
        page.overlay.append(self.audio_recorder)
    
    def start_recording(self):
        """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"""
        try:
            self.audio_recorder.record()
            self.is_recording = True
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
            return False
    
    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        try:
            self.audio_recorder.stop()
            self.is_recording = False
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False
    
    def on_recording_state_change(self, e):
        print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏: {e.data}")
    
    def on_recording_result(self, e):
        if e.data and e.data != "null":
            print(f"–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {e.data}")

class ReminderManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    
    def __init__(self, notification_manager):
        self.notification_manager = notification_manager
        self.reminders = []
        self.load_reminders()
        self.start_checker()
    
    def load_reminders(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            with open("reminders.json", "r", encoding="utf-8") as f:
                self.reminders = json.load(f)
        except:
            self.reminders = []
    
    def save_reminders(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            with open("reminders.json", "w", encoding="utf-8") as f:
                json.dump(self.reminders, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def add_reminder(self, title, message, delay_minutes=1):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        reminder = {
            "id": int(time.time() * 1000),
            "title": title,
            "message": message,
            "timestamp": time.time() + (delay_minutes * 60),
            "created": time.time()
        }
        
        self.reminders.append(reminder)
        self.save_reminders()
        return reminder["id"]
    
    def start_checker(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        def check_reminders():
            while True:
                current_time = time.time()
                for reminder in self.reminders[:]:
                    if reminder["timestamp"] <= current_time:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        self.notification_manager.show_notification(
                            reminder["title"],
                            reminder["message"]
                        )
                        # –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                        self.reminders.remove(reminder)
                        self.save_reminders()
                
                time.sleep(10)
        
        import threading
        thread = threading.Thread(target=check_reminders, daemon=True)
        thread.start()

def main(page: ft.Page):
    page.title = "–ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏"
    page.theme_mode = ft.ThemeMode.DARK
    page.padding = 20
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    notification = NativeNotification(page)
    recorder = VoiceRecorder(page)
    reminders = ReminderManager(notification)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    notification.show_notification("–ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    
    # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    status_text = ft.Text("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", size=18, color=ft.colors.GREEN)
    
    def start_recording(e):
        if recorder.start_recording():
            status_text.value = "üé§ –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å..."
            status_text.color = ft.colors.RED
            start_btn.disabled = True
            stop_btn.disabled = False
            page.update()
    
    def stop_recording(e):
        if recorder.stop_recording():
            status_text.value = "‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            status_text.color = ft.colors.GREEN
            start_btn.disabled = False
            stop_btn.disabled = True
            
            notification.show_notification(
                "–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞",
                "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
            )
            page.update()
    
    def test_notification(e):
        notification.show_notification("–¢–µ—Å—Ç", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        status_text.value = "üì¢ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        page.update()
    
    def add_reminder(e):
        reminder_id = reminders.add_reminder(
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏",
            delay_minutes=2
        )
        status_text.value = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        page.update()
    
    # –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    start_btn = ft.ElevatedButton(
        "üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å",
        on_click=start_recording,
        icon=ft.icons.MIC
    )
    
    stop_btn = ft.ElevatedButton(
        "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
        on_click=stop_recording,
        disabled=True,
        icon=ft.icons.STOP
    )
    
    test_btn = ft.ElevatedButton(
        "üì¢ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        on_click=test_notification
    )
    
    reminder_btn = ft.ElevatedButton(
        "‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 2 –º–∏–Ω",
        on_click=add_reminder
    )
    
    # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
    page.add(
        ft.Column([
            ft.Text("–ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏", size=24, weight=ft.FontWeight.BOLD),
            status_text,
            ft.Row([start_btn, stop_btn]),
            ft.Row([test_btn, reminder_btn]),
        ])
    )

if __name__ == "__main__":
    ft.app(target=main)
