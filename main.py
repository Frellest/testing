import flet as ft
import subprocess
import json
import time
from datetime import datetime

class NativeNotification:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    
    @staticmethod
    def send_notification(title, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã"""
        try:
            # –î–ª—è Termux (–µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ Termux)
            try:
                subprocess.run([
                    "termux-notification", 
                    "--title", title, 
                    "--content", message,
                    "--priority", "high"
                ], check=True, timeout=5)
                return True
            except:
                pass
            
            # –î–ª—è Linux (—á–µ—Ä–µ–∑ notify-send)
            try:
                subprocess.run([
                    "notify-send", title, message,
                    "-t", "5000"  # 5 —Å–µ–∫—É–Ω–¥
                ], check=True, timeout=5)
                return True
            except:
                pass
            
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"üì¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {title} - {message}")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

class VoiceRecorder:
    """–ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã"""
    
    def __init__(self):
        self.is_recording = False
        self.process = None
    
    def start_recording(self, duration=10):
        """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"""
        try:
            filename = f"recording_{int(time.time())}.wav"
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø–∏—Å–∏
            commands = [
                # Android/Termux
                ["termux-microphone-record", "-f", filename, "-l", str(duration * 1000)],
                # Linux arecord
                ["arecord", "-d", str(duration), "-f", "cd", filename],
                # Linux sox
                ["rec", filename, "trim", "0", str(duration)]
            ]
            
            for cmd in commands:
                try:
                    self.process = subprocess.Popen(cmd)
                    self.is_recording = True
                    print(f"üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞: {filename}")
                    return filename
                except:
                    continue
            
            # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - —ç–º—É–ª—è—Ü–∏—è
            print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∑–∞–ø–∏—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç–º—É–ª—è—Ü–∏—è")
            self.is_recording = True
            return f"emulated_recording_{int(time.time())}.wav"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: {e}")
            return None
    
    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        if not self.is_recording:
            return None
            
        try:
            if self.process:
                self.process.terminate()
                self.process.wait(timeout=3)
            
            self.is_recording = False
            print("‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
            return False

class ReminderManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª—ã"""
    
    def __init__(self):
        self.reminders_file = "reminders.json"
        self.load_reminders()
    
    def load_reminders(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.reminders_file, 'r', encoding='utf-8') as f:
                self.reminders = json.load(f)
        except:
            self.reminders = []
    
    def save_reminders(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.reminders_file, 'w', encoding='utf-8') as f:
                json.dump(self.reminders, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def add_reminder(self, title, message, reminder_time):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        reminder = {
            "id": int(time.time() * 1000),
            "title": title,
            "message": message,
            "timestamp": reminder_time,
            "created": time.time()
        }
        
        self.reminders.append(reminder)
        self.save_reminders()
        self.start_reminder_checker()
        
        return reminder["id"]
    
    def start_reminder_checker(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ–Ω–µ"""
        def checker():
            while True:
                current_time = time.time()
                for reminder in self.reminders[:]:  # –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞
                    if reminder["timestamp"] <= current_time:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        NativeNotification.send_notification(
                            reminder["title"], 
                            reminder["message"]
                        )
                        # –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                        self.reminders.remove(reminder)
                        self.save_reminders()
                
                time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
        import threading
        thread = threading.Thread(target=checker, daemon=True)
        thread.start()

def main(page: ft.Page):
    page.title = "–ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏"
    page.theme_mode = ft.ThemeMode.DARK
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    notification = NativeNotification()
    recorder = VoiceRecorder()
    reminders = ReminderManager()
    
    # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    status_text = ft.Text("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", size=16, color=ft.colors.GREEN)
    recording_status = ft.Text("", size=14, color=ft.colors.ORANGE)
    
    # –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞
    def start_recording(e):
        filename = recorder.start_recording(30)  # 30 —Å–µ–∫—É–Ω–¥
        if filename:
            recording_status.value = f"üé§ –ó–∞–ø–∏—Å—å: {filename}"
            start_btn.disabled = True
            stop_btn.disabled = False
            page.update()
    
    def stop_recording(e):
        if recorder.stop_recording():
            recording_status.value = "‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
            start_btn.disabled = False
            stop_btn.disabled = True
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            notification.send_notification(
                "–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", 
                "–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            )
            page.update()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    def test_notification(e):
        if notification.send_notification("–¢–µ—Å—Ç", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"):
            status_text.value = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            status_text.color = ft.colors.GREEN
        else:
            status_text.value = "‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            status_text.color = ft.colors.ORANGE
        page.update()
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    def add_reminder(e):
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        reminder_time = time.time() + 120
        reminder_id = reminders.add_reminder(
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏",
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏",
            reminder_time
        )
        
        status_text.value = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (ID: {reminder_id})"
        status_text.color = ft.colors.BLUE
        page.update()
    
    # –ö–Ω–æ–ø–∫–∏
    start_btn = ft.ElevatedButton(
        "üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å",
        on_click=start_recording,
        icon=ft.icons.MIC
    )
    
    stop_btn = ft.ElevatedButton(
        "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
        on_click=stop_recording,
        disabled=True,
        icon=ft.icons.STOP
    )
    
    test_btn = ft.ElevatedButton(
        "üì¢ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        on_click=test_notification,
        icon=ft.icons.NOTIFICATIONS
    )
    
    reminder_btn = ft.ElevatedButton(
        "‚è∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
        on_click=add_reminder,
        icon=ft.icons.ACCESS_ALARM
    )
    
    # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    page.add(
        ft.Column([
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("–ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏", size=24, weight=ft.FontWeight.BOLD),
                        status_text,
                        recording_status,
                    ]),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("–ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞", size=18, weight=ft.FontWeight.BOLD),
                        ft.Row([start_btn, stop_btn], alignment=ft.MainAxisAlignment.CENTER),
                    ]),
                    padding=20
                )
            ),
            
            ft.Card(
                content=ft.Container(
                    content=ft.Column([
                        ft.Text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", size=18, weight=ft.FontWeight.BOLD),
                        test_btn,
                        reminder_btn,
                    ]),
                    padding=20
                )
            ),
        ])
    )

if __name__ == "__main__":
    ft.app(target=main)
